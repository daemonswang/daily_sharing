## 软件开发模型
指导软件整个生命周期的过程安排的一套方法

### 传统模型
#### 瀑布模型
将软件开发分成不同的阶段，阶段之前有严格的时间顺序，前边的阶段完成才能进入后边的阶段

适用的场景：
- 传统行业，发展成熟的行业，需求确定且稳定（每个阶段都能把事情做正确）

现实：
- 把一件事一次性作正确很难，甚至不可能
- 因前后阶段之间的依赖关系，无法做到并行，降低了资源的利用率和效率，拉长了开发周期
- 修正错误的成本，视引入错误所处的阶段和发现问题的阶段，两阶段距离越长，成本越高（及时发现错误的能力是软件开发过程不懈追求的一个目标）

综上，瀑布模型因缺乏适应能力，已经很少被正式项目使用。但是作为一个概念模型，它为理解其他模型提供了很好的概念基础。

#### V模型
在瀑布模型基础上扩展而来，对不同的阶段加入了对应的测试，如：
 需求           <--->          validation
   架构         <--->        verification
     模块       <--->       integraiton test
       单元     <--->      unit test
                实现
     
使用的场景：
- 航空医疗等可靠性要求比较高的行业

#### 原型模型
很多时候需要快速验证某一需求或者设计，以辅助决策的制定


### 敏捷模型
正式因为瀑布模型中存在的问题，敏捷思想应用而生

#### 敏捷宣言（4条价值观 + 12条原则）

**四条价值**：
1. 个体和互动 高于 流程和工具

2. 工作的软件 高于 详尽的文档

3. 客户合作 高于 合同谈判

4. 响应变化 高于 遵循计划

**围绕价值的，12条原则**:
1. 客户满意 通过持续交付有价值的软件。

2. 欢迎需求变更，即使在开发后期。

3. 频繁交付可用的软件（以周为周期优于以月为周期）。

4. 业务人员和开发人员必须每日紧密合作。

5. 围绕有动力的个人建立项目，给予信任和支持。

6. 面对面的沟通是最有效的沟通方式。

7. 工作的软件是衡量进度的首要指标。

8. 提倡可持续开发，节奏稳定，能够长期保持。

9. 持续关注技术卓越和良好设计。

10. 简单性（尽量减少工作量的艺术）至关重要。

11. 最佳架构、需求和设计来自自组织团队。

12. 团队定期反思如何更有效，并据此调整

#### scrum
管理框架，为单个团队项目管理提供了知道，包括：
- 角色的设置（PO, Scrum Master, team player)
- sprint（强调计划）
- 组织形似 - 会议（计划会议，例会，回顾会议）

#### kanban
小规模团队，轻量化的任务管理，监督，执行

#### 极限编程
偏重工程实践（TDD、结对编程、持续集成、重构）

## 总结
上述的每种模型，不是说选择A就放弃了B，实际项目中都是采用各种组合的方式，根据不同场景合理的选择。就我目前参与的项目，会选择：scrum + 极限编程（tdd，ci/cd) + v model
